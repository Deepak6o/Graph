//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool BFS(int src,unordered_map<int,bool> &visited,vector<int> adj[])
    {
        
        unordered_map<int,int> parent;
        parent[src]=-1;
        visited[src]=1;
        queue<int> q;
        q.push(src);
        while(!q.empty())
        {
            int value=q.front();
            q.pop();
            for(auto i: adj[value])
            {
                if(visited[i]==1 and i!=parent[value])
                {
                    return true;
                }
                else if(!visited[i])
                {
                    q.push(i);
                    visited[i]=1;
                    parent[i]=value;
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        unordered_map<int,bool> visited;
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                bool ans =BFS(i,visited,adj);
                if(ans)
                {
                    return true;
                }
            }
        }
        return false;
        
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
